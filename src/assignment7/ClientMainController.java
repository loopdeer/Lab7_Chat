package assignment7;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextField;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;

import javafx.application.Platform;
import javafx.event.ActionEvent;

import javafx.scene.control.TextArea;

import javafx.event.Event;

public class ClientMainController {
	@FXML
	private TextArea viewArea;
	@FXML
	private TextField messageBox;
	@FXML
	private TextField groupTextField;
	@FXML
	private Button sendButton;
	@FXML
	private TextArea viewAreaGroup;
	@FXML
	private Button addressButton;
	@FXML
	private TextField addressBox;
	@FXML
	private Button groupSendButtton;
	@FXML
	private Tab startTab;
	@FXML
	private TabPane chatTabPane;
	
	private String groupName;
	private boolean inGroup;
	private TextArea mainArea;
	private PrintWriter writer;
	private TextField mainTextField;
	private HashMap<String, ChatTabController> chats = new HashMap<String, ChatTabController>();
	private String currentSelected;
	public ClientMainController(PrintWriter w)
	{
		writer = w;
		mainArea = viewArea;
		mainTextField = messageBox;
		inGroup = false;
		currentSelected = "*DEFAULT*";
		//chats.put("*DEFAULT*", startTab);
	}
	// Event Listener on Tab.onSelectionChanged
	@FXML
	public void allSelected(Event event) {
		// TODO Autogenerated
		mainArea = viewArea;
		mainTextField = messageBox;
		currentSelected = "*DEFAULT*";
		inGroup = false;
	}
	// Event Listener on Button[#sendButton].onAction
	@FXML
	public void sendMessage(ActionEvent event) {
		// TODO Autogenerated
		//String test = mainTextField.getText();
		Scanner commandChecker = new Scanner(mainTextField.getText());
		if(commandChecker.next().equals(ChatClient.COMMANDSTART))
		{
			mainArea.appendText("Do not start messages with " + ChatClient.COMMANDSTART + "\n");
			return;
		}
		
		if(inGroup)
		{
			if(groupName == null)
				mainArea.appendText("Please specify people to talk to.");
			else
			{
			writer.println(groupName + " " + mainTextField.getText());
			writer.flush();
			}
			mainTextField.setText("");
			mainTextField.requestFocus();
		}
		else
		{
			writer.println(ChatServer.ALLNAME + " " + mainTextField.getText());
			writer.flush();
			mainTextField.setText("");
			mainTextField.requestFocus();
		}
	}
	// Event Listener on Tab.onSelectionChanged
	/*@FXML
	public void groupSelected(Event event) {
		// TODO Autogenerated
		mainArea = viewAreaGroup;
		mainTextField = groupTextField;
		inGroup = true;
	}*/
	// Event Listener on Button[#addressButton].onAction
	@FXML
	public void talkTo(ActionEvent event) {
		// TODO Autogenerated
		
		//TODO check for proper syntax
		String people = addressBox.getText();
		addressBox.setText("");
		addressBox.requestFocus();
		writer.println(ChatClient.COMMANDSTART + " startconv " + people);
		writer.flush();
	}
	
	public TextArea getTA()
	{
		return mainArea;
	}
	
	public boolean currentlyPrivate()
	{
		return inGroup;
	}
	
	public void setGroup(String s)
	{
		if(!chats.containsKey(s))
		{
			addTab(s);
		}
	}
	
	public void newTab()
	{
		Tab newChat = new Tab();
	}
	
	public void setMainTextField(TextField f)
	{
		mainTextField = f;
	}
	
	public void setMainArea(TextArea a)
	{
		mainArea = a;
	}
	
	public PrintWriter getWriter()
	{
		return writer;
	}
	
	public void addTab(String s)
	{
		FXMLLoader loader = new FXMLLoader();
		loader.setLocation(ClientMain.class.getResource("ChatTab.fxml"));
		ChatTabController tc = new ChatTabController(this, s);
		loader.setController(tc);
		Platform.runLater(new Runnable(){

			@Override
			public void run() {
				// TODO Auto-generated method stub
				try {
					Tab temp = (Tab)loader.load();
					temp.setText(s);
					chatTabPane.getTabs().add(temp);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		});
		
		chats.put(s, tc);
	}
	
	public void handleMessage(String sender, String recip, String message)
	{
		if(recip.equals(ChatServer.ALLNAME))
			viewArea.appendText(sender + ":" + message + "\n");
		else if(chats.containsKey(recip))
		{
			ChatTabController tc = chats.get(recip);
			tc.getTA().appendText(sender + ":" + message + "\n");
		}
	}
	
	
}
